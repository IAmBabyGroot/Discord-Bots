{"version":3,"sources":["../../src/Client/Client.js"],"names":["errorCallback","callback","error","dataCallback","data","Client","constructor","options","compress","undefined","process","browser","autoReconnect","rateLimitAsError","largeThreshold","maxCachedMessages","guildCreateTimeout","shardId","shardCount","disableEveryone","bot","shard","internal","users","channels","servers","privateChannels","private_channels","friends","incomingFriendRequests","incoming_friend_requests","outgoingFriendRequests","outgoing_friend_requests","voiceConnections","voiceConnection","readyTime","uptime","user","userAgent","loginWithToken","token","email","password","then","login","logout","destroy","disconnected","sendMessage","destination","content","file","sendTTSMessage","tts","reply","message","msg","resolver","resolveMessage","channel","author","err","Error","Promise","reject","replyTTS","deleteMessage","deleteMessages","messages","updateMessage","getChannelLogs","where","limit","getMessage","messageID","pinMessage","unpinMessage","getPinnedMessages","getBans","server","sendFile","attachment","name","joinServer","invite","createServer","region","leaveServer","updateServer","deleteServer","createChannel","type","deleteChannel","banMember","length","unbanMember","kickMember","moveMember","muteMember","unmuteMember","deafenMember","undeafenMember","setNickname","nick","setNote","note","createRole","updateRole","role","deleteRole","addMemberToRole","member","addUserToRole","memberHasRole","userHasRole","removeMemberFromRole","removeUserFromRole","createInvite","chanServ","deleteInvite","getInvite","getInvites","overwritePermissions","setStatus","idleStatus","game","sendTyping","setChannelTopic","topic","setChannelName","setChannelPosition","position","setChannelUserLimit","setChannelBitrate","kbitrate","updateChannel","startTyping","stopTyping","updateDetails","details","setUsername","setAvatar","avatar","joinVoiceChannel","leaveVoiceChannel","chann","addFriend","removeFriend","getServerWebhooks","guild","getChannelWebhooks","sendWebhookMessage","webhook","editWebhook","createWebhook","deleteWebhook","getOAuthApplication","appID","awaitResponse","toSend","ret","resolve","setStatusIdle","setStatusOnline","setStatusActive","setStatusHere","setStatusAvailable","setStatusAway","setPlayingGame","setStreaming","url","forceFetchUsers"],"mappings":"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","file":"Client.js","sourcesContent":["\"use strict\";\n\nimport InternalClient from \"./InternalClient\";\nimport EventEmitter from \"events\";\nimport PMChannel from \"../Structures/PMChannel\";\n\n// This utility function creates an anonymous error handling wrapper function\n// for a given callback. It is used to allow error handling inside the callback\n// and using other means.\nfunction errorCallback(callback) {\n\treturn error => {\n\t\tcallback(error);\n\t\tthrow error;\n\t};\n}\n\n// This utility function creates an anonymous handler function to separate the\n// error and the data arguments inside a callback and return the data if it is\n// eventually done (for promise propagation).\nfunction dataCallback(callback) {\n\treturn data => {\n\t\tcallback(null, data);\n\t\treturn data;\n\t}\n}\n\n/**\n * Used to interface with the Discord API.\n */\nexport default class Client extends EventEmitter {\n\t/**\n\t * Used to instantiate Discord.Client\n\t * @param {ClientOptions} [options] options that should be passed to the Client.\n\t * @example\n\t * // creates a new Client that will try to reconnect whenever it is disconnected.\n\t * var client = new Discord.Client({\n\t *\t\tautoReconnect : true\n\t * });\n\t */\n\tconstructor(options = {}) {\n\t\tsuper();\n\t\t/**\n\t\t * Options that were passed to the client when it was instantiated.\n\t\t * @readonly\n\t\t * @type {ClientOptions}\n\t\t */\n\t\tthis.options = options || {};\n\t\tthis.options.compress = options.compress === undefined ? !process.browser : options.compress;\n\t\tthis.options.autoReconnect = options.autoReconnect === undefined ? true : options.autoReconnect;\n\t\tthis.options.rateLimitAsError = options.rateLimitAsError || false;\n\t\tthis.options.largeThreshold = options.largeThreshold || 250;\n\t\tthis.options.maxCachedMessages = options.maxCachedMessages || 1000;\n\t\tthis.options.guildCreateTimeout = options.guildCreateTimeout || 1000;\n\t\tthis.options.shardId = options.shardId || 0;\n\t\tthis.options.shardCount = options.shardCount || 0;\n\t\tthis.options.disableEveryone = options.disableEveryone || false;\n\t\tthis.options.bot = options.bot === undefined || options.bot === true ? true : false;\n\n\t\tif (typeof options.shardCount === \"number\" && typeof options.shardId === \"number\" && options.shardCount > 0) {\n\t\t\tthis.options.shard = [options.shardId, options.shardCount];\n\t\t}\n\n\t\t/**\n\t\t * Internal Client that the Client wraps around.\n\t\t * @readonly\n\t\t * @type {InternalClient}\n\t\t */\n\t\tthis.internal = new InternalClient(this);\n\t}\n\n\n\t/**\n\t * The users that the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<User>} a Cache of the Users\n\t * @readonly\n\t * @example\n\t * // log usernames of the users that the client is aware of\n\t * for(var user of client.users){\n\t *     console.log(user.username);\n\t * }\n\t */\n\tget users() {\n\t\treturn this.internal.users;\n\t}\n\n\t/**\n\t * The server channels the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<ServerChannel>} a Cache of the Server Channels\n\t * @readonly\n\t * @example\n\t * // log the names of the channels and the server they belong to\n\t * for(var channel of client.channels){\n\t *     console.log(`${channel.name} is part of ${channel.server.name}`)\n\t * }\n\t */\n\tget channels() {\n\t\treturn this.internal.channels;\n\t}\n\n\t/**\n\t * The servers the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<Server>} a Cache of the Servers\n\t * @readonly\n\t * @example\n\t * // log the names of the servers\n\t * for(var server of client.servers){\n\t *     console.log(server.name)\n\t * }\n\t */\n\tget servers() {\n\t\treturn this.internal.servers;\n\t}\n\n\t/**\n\t * The PM/DM chats the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<PMChannel>} a Cache of the PM/DM Channels.\n\t * @readonly\n\t * @example\n\t * // log the names of the users the client is participating in a PM with\n\t * for(var pm of client.privateChannels){\n\t *     console.log(`Participating in a DM with ${pm.recipient}`)\n\t * }\n\t */\n\tget privateChannels() {\n\t\treturn this.internal.private_channels;\n\t}\n\n\t/**\n\t * The friends that the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<User>|null} a Cache of friend Users (or null if bot account)\n\t * @readonly\n\t * @example\n\t * // log names of the friends that the client is aware of\n\t * for(var user of client.friends){\n\t *     console.log(user.username);\n\t * }\n\t */\n\tget friends() {\n\t\treturn this.internal.friends;\n\t}\n\n\t/**\n\t * The incoming friend requests that the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<User>|null} a Cache of incoming friend request Users (or null if bot account)\n\t * @readonly\n\t * @example\n\t * // log names of the incoming friend requests that the client is aware of\n\t * for(var user of client.incomingFriendRequests){\n\t *     console.log(user.username);\n\t * }\n\t */\n\tget incomingFriendRequests() {\n\t\treturn this.internal.incoming_friend_requests;\n\t}\n\n\t/**\n\t * The outgoing friend requests that the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<User>} a Cache of outgoing friend request Users\n\t * @readonly\n\t * @example\n\t * // log names of the outgoing friend requests that the client is aware of\n\t * for(var user of client.outgoingFriendRequests){\n\t *     console.log(user.username);\n\t * }\n\t */\n\tget outgoingFriendRequests() {\n\t\treturn this.internal.outgoing_friend_requests;\n\t}\n\n\t/**\n\t * A cache of active voice connection of the Client, or null if not applicable. Only available after `ready` event has been emitted.\n\t * @type {Cache<VoiceConnection>} a Cache of Voice Connections\n\t */\n\tget voiceConnections() {\n\t\treturn this.internal.voiceConnections;\n\t}\n\n\t/**\n\t * The first voice connection the bot has connected to. Available for backwards compatibility.\n\t * @type {VoiceConnection} first voice connection\n\t */\n\tget voiceConnection() {\n\t\treturn this.internal.voiceConnection;\n\t}\n\n\t/**\n\t * Unix timestamp of when the Client first emitted the `ready `event. Only available after `ready` event has been emitted.\n\t * @type {Number} timestamp of ready time\n\t * @example\n\t * // output when the client was ready\n\t * console.log(\"I was first ready at \" + client.readyTime);\n\t */\n\tget readyTime() {\n\t\treturn this.internal.readyTime;\n\t}\n\n\t/**\n\t * How long the client has been ready for in milliseconds. Only available after `ready` event has been emitted.\n\t * @type {Number} number in milliseconds representing uptime of the client\n\t * @example\n\t * // log how long the client has been up for\n\t * console.log(\"I have been online for \" + client.uptime + \" milliseconds\");\n\t */\n\tget uptime() {\n\t\treturn this.internal.uptime;\n\t}\n\n\t/**\n\t * A User object that represents the account the client is logged into. Only available after `ready` event has been emitted.\n\t * @type {User} user representing logged in account of client.\n\t * @example\n\t * // log username of logged in account of client\n\t * console.log(\"Logged in as \" + client.user.username);\n\t */\n\tget user() {\n\t\treturn this.internal.user;\n\t}\n\n\t/**\n\t * Object containing user-agent information required for API requests. If not modified, it will use discord.js's defaults.\n\t * @type {UserAgent}\n\t * @example\n\t * // log the stringified user-agent:\n\t * console.log(client.userAgent.full);\n\t */\n\tget userAgent() {\n\t\treturn this.internal.userAgent;\n\t}\n\n\t/**\n\t * Set the user-agent information provided. Follows the UserAgent typedef format excluding the `full` property.\n\t * @type {UserAgent}\n\t */\n\tset userAgent(userAgent) {\n\t\tthis.internal.userAgent = userAgent;\n\t}\n\n\t/**\n\t * Log the client in using a token. If you want to use methods such as `client.setUsername` or `client.setAvatar`, you must also pass the email and password parameters.\n\t * @param {string} token A valid token that can be used to authenticate the account.\n\t * @param {string} [email] Email of the Discord Account.\n\t * @param {string} [password] Password of the Discord Account.\n\t * @param {function(err: Error, token: string)} [callback] callback callback to the method\n\t * @returns {Promise<string, Error>} Resolves with the token if the login was successful, otherwise it rejects with an error.\n\t * @example\n\t * // log the client in - callback\n\t * client.login(\"token123\", null, null, function(error, token){\n\t *    if(!error){\n\t *       console.log(token);\n\t *    }\n\t * });\n\t * @example\n\t * // log the client in - promise\n\t * client.login(\"token123\")\n\t *     .then(token => console.log(token))\n\t *     .catch(err => console.log(err));\n\t */\n\tloginWithToken(token, email = null, password = null, callback = (/*err, token*/) => {}) {\n\t\tif (typeof email === \"function\") {\n\t\t\t// email is the callback\n\t\t\tcallback = email;\n\t\t\temail = null;\n\t\t\tpassword = null;\n\t\t}\n\n\t\treturn this.internal.loginWithToken(token, email, password)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Log the client in using an email and password.\n\t * @param {string} email Email of the Discord Account.\n\t * @param {string} password Password of the Discord Account.\n\t * @param {function(err: Error, token: string)} [callback] callback callback to the method\n\t * @returns {Promise<string, Error>} Resolves with the token if the login was successful, otherwise it rejects with an error.\n\t * @example\n\t * // log the client in - callback\n\t * client.login(\"jeff@gmail.com\", \"password\", function(error, token){\n\t *    if(!error){\n\t *       console.log(token);\n\t *    }\n\t * });\n\t * @example\n\t * // log the client in - promise\n\t * client.login(\"jeff@gmail.com\", \"password\")\n\t *     .then(token => console.log(token))\n\t *     .catch(err => console.log(err));\n\t */\n\tlogin(email, password, callback = (/*err, token*/) => { }) {\n\t\treturn this.internal.login(email, password)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Logs the client out gracefully and closes all WebSocket connections. Client still retains its Caches.\n\t * @param {function(err: Error)} [callback] callback callback to the method\n\t * @returns {Promise<null, Error>} Resolves with null if the logout was successful, otherwise it rejects with an error.\n\t * @example\n\t * // log the client out - callback\n\t * client.logout(function(error){\n\t *     if(error){\n\t *         console.log(\"Couldn't log out.\");\n\t *     }else{\n\t *         console.log(\"Logged out!\");\n\t *     }\n\t * });\n\t * @example\n\t * // log the client out - promise\n\t * client.logout()\n\t *     .then(() => console.log(\"Logged out!\"))\n\t *     .catch(error => console.log(\"Couldn't log out.\"));\n\t */\n\tlogout(callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.logout()\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Similar to log out but this should be used if you know you aren't going to be creating the Client again later in your program.\n\t * @param {function(err: Error)} [callback] callback callback to the method\n\t * @returns {Promise<null, Error>} Resolves with null if the destruction was successful, otherwise it rejects with an error.\n\t * @example\n\t * // destroy the client - callback\n\t * client.destroy(function(error){\n\t *     if(error){\n\t *         console.log(\"Couldn't destroy client.\");\n\t *     }else{\n\t *         console.log(\"Client destroyed!\");\n\t *     }\n\t * });\n\t * @example\n\t * // destroy the client - promise\n\t * client.destroy()\n\t *     .then(() => console.log(\"Client destroyed!\"))\n\t *     .catch(error => console.log(\"Couldn't destroy client.\"));\n\t */\n\tdestroy(callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.logout()\n\t\t\t.then(() => this.internal.disconnected(true))\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Sends a text message to the specified destination.\n\t * @param {TextChannelResolvable} destination where the message should be sent\n\t * @param {StringResolvable} content message you want to send\n\t * @param {MessageOptions} [options] options you want to apply to the message\n\t * @param {function(err: Error, msg: Message)} [callback] to the method\n\t * @returns {Promise<Message, Error>} Resolves with a Message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // sending messages\n\t * client.sendMessage(channel, \"Hi there!\");\n\t * client.sendMessage(user, \"This is a PM message!\");\n\t * client.sendMessage(server, \"This message was sent to the #general channel of the server!\");\n\t * client.sendMessage(channel, \"This message is TTS.\", {tts : true});\n\t * @example\n\t * // callbacks\n\t * client.sendMessage(channel, \"Hi there!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send message\");\n\t *     }else{\n\t *         console.log(\"Message sent!\");\n\t *     }\n\t * });\n\t * @example\n\t * // promises\n\t * client.sendMessage(channel, \"Hi there!\")\n\t *    .then(msg => console.log(\"Message sent!\"))\n\t *    .catch(err => console.log(\"Couldn't send message\"));\n\t */\n\tsendMessage(destination, content, options = {}, callback = (/*err, msg*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\t\tif (typeof content === \"object\" && content.file) {\n\t\t\t// content has file\n\t\t\toptions = content;\n\t\t\tcontent = \"\";\n\t\t}\n\n\t\treturn this.internal.sendMessage(destination, content, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Sends a TTS text message to the specified destination.\n\t * @param {TextChannelResolvable} destination where the message should be sent\n\t * @param {StringResolvable} content message you want to send\n\t * @param {function(err: Error, msg: Message)} [callback] to the method\n\t * @returns {Promise<Message, Error>} Resolves with a Message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // sending messages\n\t * client.sendTTSMessage(channel, \"This message is TTS.\");\n\t * @example\n\t * // callbacks\n\t * client.sendTTSMessage(channel, \"Hi there!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send message\");\n\t *     }else{\n\t *         console.log(\"Message sent!\");\n\t *     }\n\t * });\n\t * @example\n\t * // promises\n\t * client.sendTTSMessage(channel, \"Hi there!\")\n\t *    .then(msg => console.log(\"Message sent!\"))\n\t *    .catch(err => console.log(\"Couldn't send message\"));\n\t */\n\tsendTTSMessage(destination, content, callback = (/*err, msg*/) => { }) {\n\t\treturn this.sendMessage(destination, content, { tts: true })\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Replies to the author of a message in the same channel the message was sent.\n\t * @param {MessageResolvable} message the message to reply to\n\t * @param {StringResolvable} content message you want to send\n\t * @param {MessageOptions} [options] options you want to apply to the message\n\t * @param {function(err: Error, msg: Message)} [callback] to the method\n\t * @returns {Promise<Message, Error>} Resolves with a Message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // reply to messages\n\t * client.reply(message, \"Hello there!\");\n\t * client.reply(message, \"Hello there, this is a TTS reply!\", {tts:true});\n\t * @example\n\t * // callbacks\n\t * client.reply(message, \"Hi there!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send message\");\n\t *     }else{\n\t *         console.log(\"Message sent!\");\n\t *     }\n\t * });\n\t * @example\n\t * // promises\n\t * client.reply(message, \"Hi there!\")\n\t *    .then(msg => console.log(\"Message sent!\"))\n\t *    .catch(err => console.log(\"Couldn't send message\"));\n\t */\n\treply(message, content, options = {}, callback = (/*err, msg*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\tvar msg = this.internal.resolver.resolveMessage(message);\n\t\tif (msg) {\n\t\t\tif (!(msg.channel instanceof PMChannel)) {\n\t\t\t\tcontent = msg.author + \", \" + content;\n\t\t\t}\n\t\t\treturn this.internal.sendMessage(msg, content, options)\n\t\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t\t}\n\t\tvar err = new Error(\"Destination not resolvable to a message!\");\n\t\tcallback(err);\n\t\treturn Promise.reject(err);\n\t}\n\n\t/**\n\t * Replies to the author of a message in the same channel the message was sent using TTS.\n\t * @param {MessageResolvable} message the message to reply to\n\t * @param {StringResolvable} content message you want to send\n\t * @param {function(err: Error, msg: Message)} [callback] to the method\n\t * @returns {Promise<Message, Error>} Resolves with a Message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // reply to messages\n\t * client.replyTTS(message, \"Hello there, this is a TTS reply!\");\n\t * @example\n\t * // callbacks\n\t * client.replyTTS(message, \"Hi there!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send message\");\n\t *     }else{\n\t *         console.log(\"Message sent!\");\n\t *     }\n\t * });\n\t * @example\n\t * // promises\n\t * client.replyTTS(message, \"Hi there!\")\n\t *    .then(msg => console.log(\"Message sent!\"))\n\t *    .catch(err => console.log(\"Couldn't send message\"));\n\t */\n\treplyTTS(message, content, callback = (/*err, msg*/) => { }) {\n\t\treturn this.reply(message, content, { tts: true })\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Deletes a message (if the client has permission to)\n\t * @param {MessageResolvable} message the message to delete\n\t * @param {MessageDeletionOptions} [options] options to apply when deleting the message\n\t * @param {function(err: Error)} [callback] callback to the method\n\t * @returns {Promise<null, Error>} Resolves with null if the deletion was successful, otherwise rejects with an Error.\n\t * @example\n\t * // deleting messages\n\t * client.deleteMessage(message);\n\t * client.deleteMessage(message, {wait:5000}); //deletes after 5 seconds\n\t * @example\n\t * // deleting messages - callback\n\t * client.deleteMessage(message, function(err){\n\t *     if(err){\n\t *         console.log(\"couldn't delete\");\n\t *     }\n\t * });\n\t * @example\n\t * // deleting messages - promise\n\t * client.deleteMessage(message)\n\t *     .then(() => console.log(\"deleted!\"))\n\t *     .catch(err => console.log(\"couldn't delete\"));\n\t */\n\tdeleteMessage(message, options = {}, callback = (/*err, {}*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\treturn this.internal.deleteMessage(message, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Bulk deletes messages (if the client has permission to)\n\t * @param {Array<MessageResolvable>} message the message to delete\n\t * @param {function(err: Error)} [callback] callback to the method\n\t * @returns {Promise<null, Error>} Resolves with null if the deletion was successful, otherwise rejects with an Error.\n\t * @example\n\t * // deleting messages\n\t * client.deleteMessages([message1, message2]);\n\t */\n\tdeleteMessages(messages, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteMessages(messages)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Edits a previously sent message (if the client has permission to)\n\t * @param {MessageResolvable} message the message to edit\n\t * @param {StringResolvable} content the new content of the message\n\t * @param {MessageOptions} [options] options to apply to the message\n\t * @param {function(err: Error, msg: Message)} [callback] callback to the method\n\t * @returns {Promise<Message, Error>} Resolves with the newly edited message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // editing messages\n\t * client.updateMessage(message, \"This is an edit!\");\n\t * @example\n\t * // editing messages - callback\n\t * client.updateMessage(message, \"This is an edit!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"couldn't edit\");\n\t *     }\n\t * });\n\t * @example\n\t * // editing messages - promise\n\t * client.updateMessage(message, \"This is an edit!\")\n\t *     .then(msg => console.log(\"edited!\"))\n\t *     .catch(err => console.log(\"couldn't edit\"));\n\t */\n\tupdateMessage(message, content, options = {}, callback = (/*err, msg*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\treturn this.internal.updateMessage(message, content, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Gets the logs of a channel with a specified limit, starting from the most recent message.\n\t * @param {TextChannelResolvable} where the channel to get the logs of\n\t * @param {Number} [limit=50] Integer, the maximum amount of messages to retrieve\n\t * @param {ChannelLogsOptions} [options] options to use when getting the logs\n\t * @param {function(err: Error, logs: Array<Message>)} [callback] callback to the method\n\t * @returns {Promise<Array<Message>, Error>} Resolves with an array of messages if successful, otherwise rejects with an error.\n\t * @example\n\t * // log content of last 500 messages in channel - callback\n\t * client.getChannelLogs(channel, 500, function(err, logs){\n\t *     if(!err){\n\t *         for(var message of logs){\n\t *             console.log(message.content);\n\t *         }\n\t *     }\n\t * });\n\t * @example\n\t * // log content of last 500 messages in channel - promise\n\t * client.getChannelLogs(channel, 500)\n\t *     .then(logs => {\n\t *         for(var message of logs){\n\t *             console.log(message.content);\n\t *         }\n\t *     })\n\t *     .catch(err => console.log(\"couldn't fetch logs\"));\n\t */\n\tgetChannelLogs(where, limit = 50, options = {}, callback = (/*err, logs*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\t\telse if (typeof limit === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = limit;\n\t\t\tlimit = 50;\n\t\t}\n\n\t\treturn this.internal.getChannelLogs(where, limit, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Gets a single message of a server\n\t * @param {ChannelResolvable} channel to get the message from\n\t * @param {function(err: Error, msg: Message} [callback] callback to the method\n\t * @returns {Promise<Message, Error>} Resolves with a message if the request was successful, otherwise rejects with an error.\n\t * @example\n\t * // get message object off a snowflake and log its content - callback\n\t * client.getMessage(channel, '192696158886428672', function(err, msg) {\n\t *     if(!err) {\n\t *         console.log(msg.content);\n\t *     } else {\n\t *         console.log(\"couldn't get the message\");\n\t *     }\n\t * }\n\t * @example\n\t * //get message object off a snowflake and log its content - promise\n\t * client.getMessage(channel, '192696158886428672')\n\t *     .then(msg => {\n\t *         console.log(msg.content);\n\t *     })\n\t *     .catch(err => console.log(\"couldn't get the message\"));\n\t */\n\n\tgetMessage(channel, messageID, callback = (/*err, msg*/) => { }) {\n\t\treturn this.internal.getMessage(channel, messageID)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Pins a message to a channel.\n\t * @param {MessageResolvable} message to pin.\n\t * @returns {Promise<null, Error>} resolves null if successful, otherwise rejects with an error.\n\t * @example\n\t * // pin message - callback\n\t * client.pinMessage(msg, (err) => {\n\t *     if(!err) {\n\t *         console.log(\"Successfully pinned message\")\n\t *     } else {\n\t *         console.log(\"Couldn't pin the message: \" + err);\n\t *     }\n\t * });\n\t * @example\n\t * // pin message - promise\n\t * client.pinMessage(msg)\n\t *     .then(() => {\n\t *         console.log(\"Successfully pinned message\");\n\t *     })\n\t *     .catch(err => console.log(\"Couldn't pin the message: \" + err));\n\t */\n\n\tpinMessage(msg, callback = (/*err*/) => { }) {\n\t\treturn this.internal.pinMessage(msg)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Unpins a message to a server.\n\t * @param {MessageResolvable} message to unpin.\n\t * @returns {Promise<null, Error>} resolves null if successful, otherwise rejects with an error.\n\t * @example\n\t * // unpin message - callback\n\t * client.unpinMessage(msg, (err) => {\n\t *     if(!err) {\n\t *         console.log(\"Successfully unpinned message\")\n\t *     } else {\n\t *         console.log(\"Couldn't pin the message: \" + err);\n\t *     }\n\t * });\n\t * @example\n\t * // unpin message - promise\n\t * client.unpinMessage(msg)\n\t *     .then(() => {\n\t *         console.log(\"Successfully unpinned message\");\n\t *     })\n\t *     .catch(err => console.log(\"Couldn't unpin the message: \" + err));\n\t */\n\n\tunpinMessage(msg, callback = (/*err*/) => { }) {\n\t\treturn this.internal.unpinMessage(msg)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Gets all pinned messages of a channel.\n\t * @param {TextChannelResolvable} where to get the pins from.\n\t * @returns {Promise<Array<Message>, Error>} Resolves with an array of messages if successful, otherwise rejects with an error.\n\t * @example\n\t * // log all pinned messages - callback\n\t * client.getPinnedMessages(channel, (err, messages) => {\n\t *     if(!err) {\n\t *         for(var message of messages) {\n\t *             console.log(message.content);\n\t *         }\n\t *     } else {\n\t *         console.log(\"Couldn't fetch pins: \" + err);\n\t *     }\n\t * });\n\t * @example\n\t * // log all pinned messages - promise\n\t * client.getPinnedMessages(channel)\n\t *     .then(messages => {\n\t *         for(var message of messages) {\n\t *             console.log(message.content);\n\t *         }\n\t *     })\n\t *     .catch(err => console.log(\"Couldn't fetch pins: \" + err));\n\t */\n\n\tgetPinnedMessages(channel, callback = (/*err, messages*/) => { }) {\n\t\treturn this.internal.getPinnedMessages(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Gets the banned users of a server (if the client has permission to)\n\t * @param {ServerResolvable} server server to get banned users of\n\t * @param {function(err: Error, bans: Array<User>)} [callback] callback to the method\n\t * @returns {Promise<Array<User>, Error>} Resolves with an array of users if the request was successful, otherwise rejects with an error.\n\t * @example\n\t * // loop through banned users - callback\n\t * client.getBans(server, function(err, bans){\n\t *     if(!err){\n\t *         for(var user of bans){\n\t *             console.log(user.username + \" was banned from \" + server.name);\n\t *         }\n\t *     }\n\t * });\n\t * @example\n\t * // loop through banned users - promise\n\t * client.getBans(server)\n\t *     .then(bans => {\n\t *         for(var user of bans){\n\t *             console.log(user.username + \" was banned from \" + server.name);\n\t *         }\n\t *     })\n\t *     .catch(err => console.log(\"couldn't get bans\"));\n\t */\n\tgetBans(server, callback = (/*err, bans*/) => { }) {\n\t\treturn this.internal.getBans(server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Sends a file (embedded if possible) to the specified channel.\n\t * @param {TextChannelResolvable} destination channel to send the file to\n\t * @param {FileResolvable} attachment the file to send\n\t * @param {string} name name of the file, especially including the extension\n\t * @param {function(err: Error, msg: Message)} [callback] callback to the method\n\t * @returns {Promise<msg: Message, err: Error>} resolves with the sent file as a message if successful, otherwise rejects with an error\n\t * @example\n\t * // send a file - callback\n\t * client.sendFile(channel, new Buffer(\"Hello this a text file\"), \"file.txt\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send file!\");\n\t *     }\n\t * });\n\t * @example\n\t * // send a file - promises\n\t * client.sendFile(channel, \"C:/path/to/file.txt\", \"file.txt\")\n\t *     .then(msg => console.log(\"sent file!\"))\n\t *     .catch(err => console.log(\"couldn't send file!\"));\n\t */\n\tsendFile(destination, attachment, name, content, callback = (/*err, m*/) => { }) {\n\t\tif (typeof content === \"function\") {\n\t\t\t// content is the callback\n\t\t\tcallback = content;\n\t\t\tcontent = undefined; // Will get resolved into original filename in internal\n\t\t}\n\t\tif (typeof name === \"function\") {\n\t\t\t// name is the callback\n\t\t\tcallback = name;\n\t\t\tname = undefined; // Will get resolved into original filename in internal\n\t\t}\n\n\t\treturn this.internal.sendFile(destination, attachment, name, content)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Client accepts the specified invite to join a server. If the Client is already in the server, the promise/callback resolve immediately.\n\t * @param {InviteIDResolvable} invite invite to the server\n\t * @param {function(err: Error, server: Server)} [callback] callback to the method.\n\t * @returns {Promise<Server, Error>} resolves with the newly joined server if succesful, rejects with an error if not.\n\t * @example\n\t * // join a server - callback\n\t * client.joinServer(\"https://discord.gg/0BwZcrFhUKZ55bJL\", function(err, server){\n\t *     if(!err){\n\t *         console.log(\"Joined \" + server.name);\n\t *     }\n\t * });\n\t * @example\n\t * // join a server - promises\n\t * client.joinServer(\"https://discord.gg/0BwZcrFhUKZ55bJL\")\n\t *     .then(server => console.log(\"Joined \" + server.name))\n\t *     .catch(err => console.log(\"Couldn't join!\"));\n\t */\n\tjoinServer(invite, callback = (/*err, srv*/) => { }) {\n\t\treturn this.internal.joinServer(invite)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Creates a Discord Server and joins it\n\t * @param {string} name the name of the server\n\t * @param {region} [region=london] the region of the server\n\t * @param {function(err: Error, server: Server)} [callback] callback to the method\n\t * @returns {Promise<Server, Error>} resolves with the newly created server if successful, rejects with an error if not.\n\t * @example\n\t * //creating a server - callback\n\t * client.createServer(\"discord.js\", \"london\", function(err, server){\n\t *     if(err){\n\t *         console.log(\"could not create server\");\n\t *     }\n\t * });\n\t * @example\n\t * //creating a server - promises\n\t * client.createServer(\"discord.js\", \"london\")\n\t *      .then(server => console.log(\"Made server!\"))\n\t *      .catch(error => console.log(\"Couldn't make server!\"));\n\t */\n\tcreateServer(name, region = \"london\", callback = (/*err, srv*/) => { }) {\n\t\treturn this.internal.createServer(name, region)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Leaves a Discord Server\n\t * @param {ServerResolvable} server the server to leave\n\t * @param {function(err: Error)} [callback] callback to the method\n\t * @returns {Promise<null, Error>} resolves null if successful, otherwise rejects with an error.\n\t */\n\tleaveServer(server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.leaveServer(server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def updateServer\n\tupdateServer(server, options, region, callback = (/*err, srv*/) => { }) {\n\t\tif (typeof region === \"function\") {\n\t\t\t// region is the callback\n\t\t\tcallback = region;\n\t\t\tregion = undefined;\n\t\t} else if (region && typeof options === \"string\") {\n\t\t\toptions = {\n\t\t\t\tname: options,\n\t\t\t\tregion: region\n\t\t\t};\n\t\t}\n\n\t\treturn this.internal.updateServer(server, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Deletes a Discord Server\n\t * @param {ServerResolvable} server the server to leave\n\t * @param {function(err: Error)} [callback] callback to the method\n\t * @returns {Promise<null, Error>} resolves null if successful, otherwise rejects with an error.\n\t */\n\tdeleteServer(server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteServer(server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def createChannel\n\tcreateChannel(server, name, type = 0, callback = (/*err, channel*/) => { }) {\n\t\tif (typeof type === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = type;\n\t\t\ttype = 0;\n\t\t}\n\n\t\treturn this.internal.createChannel(server, name, type)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def deleteChannel\n\tdeleteChannel(channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteChannel(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def banMember\n\tbanMember(user, server, length = 1, callback = (/*err, {}*/) => { }) {\n\t\tif (typeof length === \"function\") {\n\t\t\t// length is the callback\n\t\t\tcallback = length;\n\t\t\tlength = 1;\n\t\t}\n\n\t\treturn this.internal.banMember(user, server, length)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def unbanMember\n\tunbanMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.unbanMember(user, server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def kickMember\n\tkickMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.kickMember(user, server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def moveMember\n\tmoveMember(user, channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.moveMember(user, channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def muteMember\n\tmuteMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.muteMember(user, server)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def unmuteMember\n\tunmuteMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.unmuteMember(user, server)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def deafenMember\n\tdeafenMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deafenMember(user, server)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def undeafenMember\n\tundeafenMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.undeafenMember(user, server)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setNickname\n\tsetNickname(server, nick, user, callback = (/*err, {}*/) => { }) {\n\t\tif (typeof user === \"function\") {\n\t\t\t// user is the callback\n\t\t\tcallback = user;\n\t\t\tuser = null;\n\t\t}\n\t\tif(!user) {\n\t\t\tuser = this.user;\n\t\t}\n\t\treturn this.internal.setNickname(server, nick, user)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setNote\n\tsetNote(user, note, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setNote(user,note)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def createRole\n\tcreateRole(server, data = null, callback = (/*err, role*/) => { }) {\n\t\tif (typeof data === \"function\") {\n\t\t\t// data is the callback\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\n\t\treturn this.internal.createRole(server, data)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def updateRole\n\tupdateRole(role, data = null, callback = (/*err, role*/) => { }) {\n\t\tif (typeof data === \"function\") {\n\t\t\t// data is the callback\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\t\treturn this.internal.updateRole(role, data)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def deleteRole\n\tdeleteRole(role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteRole(role)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def addMemberToRole\n\taddMemberToRole(member, role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.addMemberToRole(member, role)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def addUserToRole\n\taddUserToRole(member, role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.addMemberToRole(member, role, callback);\n\t}\n\n\t// def addUserToRole\n\tmemberHasRole(member, role) {\n\t\treturn this.internal.memberHasRole(member, role);\n\t}\n\n\t// def addUserToRole\n\tuserHasRole(member, role) {\n\t\treturn this.memberHasRole(member, role);\n\t}\n\n\t// def removeMemberFromRole\n\tremoveMemberFromRole(member, role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.removeMemberFromRole(member, role)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def removeUserFromRole\n\tremoveUserFromRole(member, role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.removeMemberFromRole(member, role, callback);\n\t}\n\n\t// def createInvite\n\tcreateInvite(chanServ, options, callback = (/*err, invite*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = undefined;\n\t\t}\n\n\t\treturn this.internal.createInvite(chanServ, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def deleteInvite\n\tdeleteInvite(invite, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteInvite(invite)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def getInvite\n\tgetInvite(invite, callback = (/*err, inv*/) => { }) {\n\t\treturn this.internal.getInvite(invite)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def getInvites\n\tgetInvites(channel, callback = (/*err, inv*/) => { }) {\n\t\treturn this.internal.getInvites(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def overwritePermissions\n\toverwritePermissions(channel, role, options = {}, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.overwritePermissions(channel, role, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setStatus\n\tsetStatus(idleStatus, game, callback = (/*err, {}*/) => { }) {\n\t\tif (typeof game === \"function\") {\n\t\t\t// game is the callback\n\t\t\tcallback = game;\n\t\t\tgame = null;\n\t\t} else if (typeof idleStatus === \"function\") {\n\t\t\t// idleStatus is the callback\n\t\t\tcallback = idleStatus;\n\t\t\tgame = null;\n\t\t}\n\n\t\treturn this.internal.setStatus(idleStatus, game)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def sendTyping\n\tsendTyping(channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.sendTyping(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelTopic\n\tsetChannelTopic(channel, topic, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelTopic(channel, topic)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelName\n\tsetChannelName(channel, name, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelName(channel, name)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelPosition\n\tsetChannelPosition(channel, position, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelPosition(channel, position)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelUserLimit\n\tsetChannelUserLimit(channel, limit, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelUserLimit(channel, limit)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelBitrate\n\tsetChannelBitrate(channel, kbitrate, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelBitrate(channel, kbitrate)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def updateChannel\n\tupdateChannel(channel, data, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.updateChannel(channel, data)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def startTyping\n\tstartTyping(channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.startTyping(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def stopTyping\n\tstopTyping(channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.stopTyping(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def updateDetails\n\tupdateDetails(details, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.updateDetails(details)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setUsername\n\tsetUsername(name, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setUsername(name)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setAvatar\n\tsetAvatar(avatar, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setAvatar(avatar)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def joinVoiceChannel\n\tjoinVoiceChannel(channel, callback = (/*err, channel*/) => { }) {\n\t\treturn this.internal.joinVoiceChannel(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def leaveVoiceChannel\n\tleaveVoiceChannel(chann, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.leaveVoiceChannel(chann)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def addFriend\n\taddFriend(user, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.addFriend(user)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def removeFriend\n\tremoveFriend(user, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.removeFriend(user)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tgetServerWebhooks(guild, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.getServerWebhooks(guild)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tgetChannelWebhooks(channel, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.getChannelWebhooks(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tsendWebhookMessage(webhook, content, options = {}, callback = (/*err, {}*/) => {}) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\treturn this.internal.sendWebhookMessage(webhook, content, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\teditWebhook(webhook, options = {}, callback = (/*err, {}*/) => {}) {\n    if (typeof options === \"function\") {\n      // options is the callback\n      callback = options;\n      options = {};\n    }\n\n\t  return this.internal.editWebhook(webhook, options)\n      .then(dataCallback(callback), errorCallback(callback));\n  }\n\n  createWebhook(webhook, options = {}, callback = (/*err, {}*/) => {}) {\n    if (typeof options === \"function\") {\n      // options is the callback\n      callback = options;\n      options = {};\n    }\n\n    return this.internal.createWebhook(webhook, options)\n      .then(dataCallback(callback), errorCallback(callback));\n  }\n\n\tdeleteWebhook(webhook, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.createWebhook(webhook)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def getOAuthApplication\n\tgetOAuthApplication(appID, callback = (/*err, bans*/) => { }) {\n\t\tif (typeof appID === \"function\") {\n\t\t\t// appID is the callback\n\t\t\tcallback = appID;\n\t\t\tappID = null;\n\t\t}\n\t\treturn this.internal.getOAuthApplication(appID)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def awaitResponse\n\tawaitResponse(msg, toSend = null, options = null, callback = (/*err, newMsg*/) => { }) {\n\t\tvar ret;\n\n\t\tif (toSend) {\n\t\t\tif (typeof toSend === \"function\") {\n\t\t\t\t// (msg, callback)\n\t\t\t\tcallback = toSend;\n\t\t\t\ttoSend = null;\n\t\t\t\toptions = null;\n\t\t\t} else {\n\t\t\t\t// (msg, toSend, ...)\n\t\t\t\tif (options) {\n\t\t\t\t\tif (typeof options === \"function\") {\n\t\t\t\t\t\t//(msg, toSend, callback)\n\t\t\t\t\t\tcallback = options;\n\t\t\t\t\t\toptions = null;\n\t\t\t\t\t\tret = this.sendMessage(msg, toSend);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//(msg, toSend, options, callback)\n\t\t\t\t\t\tret = this.sendMessage(msg, toSend, options);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// (msg, toSend) promise\n\t\t\t\t\tret = this.sendMessage(msg, toSend);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!ret) {\n\t\t\tret = Promise.resolve();\n\t\t}\n\t\t// (msg) promise\n\t\treturn ret.then(() => this.internal.awaitResponse(msg))\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tsetStatusIdle(callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setStatus(\"idle\")\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tsetStatusOnline(callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setStatus(\"online\")\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tsetStatusActive(callback) {\n\t\treturn this.setStatusOnline(callback);\n\t}\n\n\tsetStatusHere(callback) {\n\t\treturn this.setStatusOnline(callback);\n\t}\n\n\tsetStatusAvailable(callback) {\n\t\treturn this.setStatusOnline(callback);\n\t}\n\n\tsetStatusAway(callback) {\n\t\treturn this.setStatusIdle(callback);\n\t}\n\n\tsetPlayingGame(game, callback = (/*err, {}*/) => { }) {\n\t\treturn this.setStatus(null, game, callback);\n\t}\n\n\tsetStreaming(name, url, type, callback = (/*err, {}*/) => { }) {\n\t\treturn this.setStatus(null, {name: name, url: url, type: type}, callback);\n\t}\n\n\t//def forceFetchUsers\n\tforceFetchUsers(callback){\n\t\treturn this.internal.forceFetchUsers().then(callback);\n\t}\n}\n"]}