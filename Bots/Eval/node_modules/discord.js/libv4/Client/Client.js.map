{"version":3,"sources":["../../src/Client/Client.js"],"names":["errorCallback","callback","error","dataCallback","data","Client","options","compress","undefined","process","browser","autoReconnect","rateLimitAsError","largeThreshold","maxCachedMessages","guildCreateTimeout","shardId","shardCount","disableEveryone","bot","shard","internal","token","email","password","loginWithToken","then","login","logout","disconnected","destination","content","file","sendMessage","tts","message","msg","resolver","resolveMessage","channel","author","err","Error","Promise","reject","reply","deleteMessage","messages","deleteMessages","updateMessage","where","limit","getChannelLogs","messageID","getMessage","pinMessage","unpinMessage","getPinnedMessages","server","getBans","attachment","name","sendFile","invite","joinServer","region","createServer","leaveServer","updateServer","deleteServer","type","createChannel","deleteChannel","user","length","banMember","unbanMember","kickMember","moveMember","muteMember","unmuteMember","deafenMember","undeafenMember","nick","setNickname","note","setNote","createRole","role","updateRole","deleteRole","member","addMemberToRole","memberHasRole","removeMemberFromRole","chanServ","createInvite","deleteInvite","getInvite","getInvites","overwritePermissions","idleStatus","game","setStatus","sendTyping","topic","setChannelTopic","setChannelName","position","setChannelPosition","setChannelUserLimit","kbitrate","setChannelBitrate","updateChannel","startTyping","stopTyping","details","updateDetails","setUsername","avatar","setAvatar","joinVoiceChannel","chann","leaveVoiceChannel","addFriend","removeFriend","guild","getServerWebhooks","getChannelWebhooks","webhook","sendWebhookMessage","editWebhook","createWebhook","appID","getOAuthApplication","toSend","ret","resolve","awaitResponse","setStatusOnline","setStatusIdle","url","forceFetchUsers","users","channels","servers","private_channels","friends","incoming_friend_requests","outgoing_friend_requests","voiceConnections","voiceConnection","readyTime","uptime","userAgent"],"mappings":"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","file":"Client.js","sourcesContent":["\"use strict\";\n\nimport InternalClient from \"./InternalClient\";\nimport EventEmitter from \"events\";\nimport PMChannel from \"../Structures/PMChannel\";\n\n// This utility function creates an anonymous error handling wrapper function\n// for a given callback. It is used to allow error handling inside the callback\n// and using other means.\nfunction errorCallback(callback) {\n\treturn error => {\n\t\tcallback(error);\n\t\tthrow error;\n\t};\n}\n\n// This utility function creates an anonymous handler function to separate the\n// error and the data arguments inside a callback and return the data if it is\n// eventually done (for promise propagation).\nfunction dataCallback(callback) {\n\treturn data => {\n\t\tcallback(null, data);\n\t\treturn data;\n\t}\n}\n\n/**\n * Used to interface with the Discord API.\n */\nexport default class Client extends EventEmitter {\n\t/**\n\t * Used to instantiate Discord.Client\n\t * @param {ClientOptions} [options] options that should be passed to the Client.\n\t * @example\n\t * // creates a new Client that will try to reconnect whenever it is disconnected.\n\t * var client = new Discord.Client({\n\t *\t\tautoReconnect : true\n\t * });\n\t */\n\tconstructor(options = {}) {\n\t\tsuper();\n\t\t/**\n\t\t * Options that were passed to the client when it was instantiated.\n\t\t * @readonly\n\t\t * @type {ClientOptions}\n\t\t */\n\t\tthis.options = options || {};\n\t\tthis.options.compress = options.compress === undefined ? !process.browser : options.compress;\n\t\tthis.options.autoReconnect = options.autoReconnect === undefined ? true : options.autoReconnect;\n\t\tthis.options.rateLimitAsError = options.rateLimitAsError || false;\n\t\tthis.options.largeThreshold = options.largeThreshold || 250;\n\t\tthis.options.maxCachedMessages = options.maxCachedMessages || 1000;\n\t\tthis.options.guildCreateTimeout = options.guildCreateTimeout || 1000;\n\t\tthis.options.shardId = options.shardId || 0;\n\t\tthis.options.shardCount = options.shardCount || 0;\n\t\tthis.options.disableEveryone = options.disableEveryone || false;\n\t\tthis.options.bot = options.bot === undefined || options.bot === true ? true : false;\n\n\t\tif (typeof options.shardCount === \"number\" && typeof options.shardId === \"number\" && options.shardCount > 0) {\n\t\t\tthis.options.shard = [options.shardId, options.shardCount];\n\t\t}\n\n\t\t/**\n\t\t * Internal Client that the Client wraps around.\n\t\t * @readonly\n\t\t * @type {InternalClient}\n\t\t */\n\t\tthis.internal = new InternalClient(this);\n\t}\n\n\n\t/**\n\t * The users that the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<User>} a Cache of the Users\n\t * @readonly\n\t * @example\n\t * // log usernames of the users that the client is aware of\n\t * for(var user of client.users){\n\t *     console.log(user.username);\n\t * }\n\t */\n\tget users() {\n\t\treturn this.internal.users;\n\t}\n\n\t/**\n\t * The server channels the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<ServerChannel>} a Cache of the Server Channels\n\t * @readonly\n\t * @example\n\t * // log the names of the channels and the server they belong to\n\t * for(var channel of client.channels){\n\t *     console.log(`${channel.name} is part of ${channel.server.name}`)\n\t * }\n\t */\n\tget channels() {\n\t\treturn this.internal.channels;\n\t}\n\n\t/**\n\t * The servers the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<Server>} a Cache of the Servers\n\t * @readonly\n\t * @example\n\t * // log the names of the servers\n\t * for(var server of client.servers){\n\t *     console.log(server.name)\n\t * }\n\t */\n\tget servers() {\n\t\treturn this.internal.servers;\n\t}\n\n\t/**\n\t * The PM/DM chats the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<PMChannel>} a Cache of the PM/DM Channels.\n\t * @readonly\n\t * @example\n\t * // log the names of the users the client is participating in a PM with\n\t * for(var pm of client.privateChannels){\n\t *     console.log(`Participating in a DM with ${pm.recipient}`)\n\t * }\n\t */\n\tget privateChannels() {\n\t\treturn this.internal.private_channels;\n\t}\n\n\t/**\n\t * The friends that the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<User>|null} a Cache of friend Users (or null if bot account)\n\t * @readonly\n\t * @example\n\t * // log names of the friends that the client is aware of\n\t * for(var user of client.friends){\n\t *     console.log(user.username);\n\t * }\n\t */\n\tget friends() {\n\t\treturn this.internal.friends;\n\t}\n\n\t/**\n\t * The incoming friend requests that the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<User>|null} a Cache of incoming friend request Users (or null if bot account)\n\t * @readonly\n\t * @example\n\t * // log names of the incoming friend requests that the client is aware of\n\t * for(var user of client.incomingFriendRequests){\n\t *     console.log(user.username);\n\t * }\n\t */\n\tget incomingFriendRequests() {\n\t\treturn this.internal.incoming_friend_requests;\n\t}\n\n\t/**\n\t * The outgoing friend requests that the Client is aware of. Only available after `ready` event has been emitted.\n\t * @type {Cache<User>} a Cache of outgoing friend request Users\n\t * @readonly\n\t * @example\n\t * // log names of the outgoing friend requests that the client is aware of\n\t * for(var user of client.outgoingFriendRequests){\n\t *     console.log(user.username);\n\t * }\n\t */\n\tget outgoingFriendRequests() {\n\t\treturn this.internal.outgoing_friend_requests;\n\t}\n\n\t/**\n\t * A cache of active voice connection of the Client, or null if not applicable. Only available after `ready` event has been emitted.\n\t * @type {Cache<VoiceConnection>} a Cache of Voice Connections\n\t */\n\tget voiceConnections() {\n\t\treturn this.internal.voiceConnections;\n\t}\n\n\t/**\n\t * The first voice connection the bot has connected to. Available for backwards compatibility.\n\t * @type {VoiceConnection} first voice connection\n\t */\n\tget voiceConnection() {\n\t\treturn this.internal.voiceConnection;\n\t}\n\n\t/**\n\t * Unix timestamp of when the Client first emitted the `ready `event. Only available after `ready` event has been emitted.\n\t * @type {Number} timestamp of ready time\n\t * @example\n\t * // output when the client was ready\n\t * console.log(\"I was first ready at \" + client.readyTime);\n\t */\n\tget readyTime() {\n\t\treturn this.internal.readyTime;\n\t}\n\n\t/**\n\t * How long the client has been ready for in milliseconds. Only available after `ready` event has been emitted.\n\t * @type {Number} number in milliseconds representing uptime of the client\n\t * @example\n\t * // log how long the client has been up for\n\t * console.log(\"I have been online for \" + client.uptime + \" milliseconds\");\n\t */\n\tget uptime() {\n\t\treturn this.internal.uptime;\n\t}\n\n\t/**\n\t * A User object that represents the account the client is logged into. Only available after `ready` event has been emitted.\n\t * @type {User} user representing logged in account of client.\n\t * @example\n\t * // log username of logged in account of client\n\t * console.log(\"Logged in as \" + client.user.username);\n\t */\n\tget user() {\n\t\treturn this.internal.user;\n\t}\n\n\t/**\n\t * Object containing user-agent information required for API requests. If not modified, it will use discord.js's defaults.\n\t * @type {UserAgent}\n\t * @example\n\t * // log the stringified user-agent:\n\t * console.log(client.userAgent.full);\n\t */\n\tget userAgent() {\n\t\treturn this.internal.userAgent;\n\t}\n\n\t/**\n\t * Set the user-agent information provided. Follows the UserAgent typedef format excluding the `full` property.\n\t * @type {UserAgent}\n\t */\n\tset userAgent(userAgent) {\n\t\tthis.internal.userAgent = userAgent;\n\t}\n\n\t/**\n\t * Log the client in using a token. If you want to use methods such as `client.setUsername` or `client.setAvatar`, you must also pass the email and password parameters.\n\t * @param {string} token A valid token that can be used to authenticate the account.\n\t * @param {string} [email] Email of the Discord Account.\n\t * @param {string} [password] Password of the Discord Account.\n\t * @param {function(err: Error, token: string)} [callback] callback callback to the method\n\t * @returns {Promise<string, Error>} Resolves with the token if the login was successful, otherwise it rejects with an error.\n\t * @example\n\t * // log the client in - callback\n\t * client.login(\"token123\", null, null, function(error, token){\n\t *    if(!error){\n\t *       console.log(token);\n\t *    }\n\t * });\n\t * @example\n\t * // log the client in - promise\n\t * client.login(\"token123\")\n\t *     .then(token => console.log(token))\n\t *     .catch(err => console.log(err));\n\t */\n\tloginWithToken(token, email = null, password = null, callback = (/*err, token*/) => {}) {\n\t\tif (typeof email === \"function\") {\n\t\t\t// email is the callback\n\t\t\tcallback = email;\n\t\t\temail = null;\n\t\t\tpassword = null;\n\t\t}\n\n\t\treturn this.internal.loginWithToken(token, email, password)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Log the client in using an email and password.\n\t * @param {string} email Email of the Discord Account.\n\t * @param {string} password Password of the Discord Account.\n\t * @param {function(err: Error, token: string)} [callback] callback callback to the method\n\t * @returns {Promise<string, Error>} Resolves with the token if the login was successful, otherwise it rejects with an error.\n\t * @example\n\t * // log the client in - callback\n\t * client.login(\"jeff@gmail.com\", \"password\", function(error, token){\n\t *    if(!error){\n\t *       console.log(token);\n\t *    }\n\t * });\n\t * @example\n\t * // log the client in - promise\n\t * client.login(\"jeff@gmail.com\", \"password\")\n\t *     .then(token => console.log(token))\n\t *     .catch(err => console.log(err));\n\t */\n\tlogin(email, password, callback = (/*err, token*/) => { }) {\n\t\treturn this.internal.login(email, password)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Logs the client out gracefully and closes all WebSocket connections. Client still retains its Caches.\n\t * @param {function(err: Error)} [callback] callback callback to the method\n\t * @returns {Promise<null, Error>} Resolves with null if the logout was successful, otherwise it rejects with an error.\n\t * @example\n\t * // log the client out - callback\n\t * client.logout(function(error){\n\t *     if(error){\n\t *         console.log(\"Couldn't log out.\");\n\t *     }else{\n\t *         console.log(\"Logged out!\");\n\t *     }\n\t * });\n\t * @example\n\t * // log the client out - promise\n\t * client.logout()\n\t *     .then(() => console.log(\"Logged out!\"))\n\t *     .catch(error => console.log(\"Couldn't log out.\"));\n\t */\n\tlogout(callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.logout()\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Similar to log out but this should be used if you know you aren't going to be creating the Client again later in your program.\n\t * @param {function(err: Error)} [callback] callback callback to the method\n\t * @returns {Promise<null, Error>} Resolves with null if the destruction was successful, otherwise it rejects with an error.\n\t * @example\n\t * // destroy the client - callback\n\t * client.destroy(function(error){\n\t *     if(error){\n\t *         console.log(\"Couldn't destroy client.\");\n\t *     }else{\n\t *         console.log(\"Client destroyed!\");\n\t *     }\n\t * });\n\t * @example\n\t * // destroy the client - promise\n\t * client.destroy()\n\t *     .then(() => console.log(\"Client destroyed!\"))\n\t *     .catch(error => console.log(\"Couldn't destroy client.\"));\n\t */\n\tdestroy(callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.logout()\n\t\t\t.then(() => this.internal.disconnected(true))\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Sends a text message to the specified destination.\n\t * @param {TextChannelResolvable} destination where the message should be sent\n\t * @param {StringResolvable} content message you want to send\n\t * @param {MessageOptions} [options] options you want to apply to the message\n\t * @param {function(err: Error, msg: Message)} [callback] to the method\n\t * @returns {Promise<Message, Error>} Resolves with a Message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // sending messages\n\t * client.sendMessage(channel, \"Hi there!\");\n\t * client.sendMessage(user, \"This is a PM message!\");\n\t * client.sendMessage(server, \"This message was sent to the #general channel of the server!\");\n\t * client.sendMessage(channel, \"This message is TTS.\", {tts : true});\n\t * @example\n\t * // callbacks\n\t * client.sendMessage(channel, \"Hi there!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send message\");\n\t *     }else{\n\t *         console.log(\"Message sent!\");\n\t *     }\n\t * });\n\t * @example\n\t * // promises\n\t * client.sendMessage(channel, \"Hi there!\")\n\t *    .then(msg => console.log(\"Message sent!\"))\n\t *    .catch(err => console.log(\"Couldn't send message\"));\n\t */\n\tsendMessage(destination, content, options = {}, callback = (/*err, msg*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\t\tif (typeof content === \"object\" && content.file) {\n\t\t\t// content has file\n\t\t\toptions = content;\n\t\t\tcontent = \"\";\n\t\t}\n\n\t\treturn this.internal.sendMessage(destination, content, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Sends a TTS text message to the specified destination.\n\t * @param {TextChannelResolvable} destination where the message should be sent\n\t * @param {StringResolvable} content message you want to send\n\t * @param {function(err: Error, msg: Message)} [callback] to the method\n\t * @returns {Promise<Message, Error>} Resolves with a Message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // sending messages\n\t * client.sendTTSMessage(channel, \"This message is TTS.\");\n\t * @example\n\t * // callbacks\n\t * client.sendTTSMessage(channel, \"Hi there!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send message\");\n\t *     }else{\n\t *         console.log(\"Message sent!\");\n\t *     }\n\t * });\n\t * @example\n\t * // promises\n\t * client.sendTTSMessage(channel, \"Hi there!\")\n\t *    .then(msg => console.log(\"Message sent!\"))\n\t *    .catch(err => console.log(\"Couldn't send message\"));\n\t */\n\tsendTTSMessage(destination, content, callback = (/*err, msg*/) => { }) {\n\t\treturn this.sendMessage(destination, content, { tts: true })\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Replies to the author of a message in the same channel the message was sent.\n\t * @param {MessageResolvable} message the message to reply to\n\t * @param {StringResolvable} content message you want to send\n\t * @param {MessageOptions} [options] options you want to apply to the message\n\t * @param {function(err: Error, msg: Message)} [callback] to the method\n\t * @returns {Promise<Message, Error>} Resolves with a Message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // reply to messages\n\t * client.reply(message, \"Hello there!\");\n\t * client.reply(message, \"Hello there, this is a TTS reply!\", {tts:true});\n\t * @example\n\t * // callbacks\n\t * client.reply(message, \"Hi there!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send message\");\n\t *     }else{\n\t *         console.log(\"Message sent!\");\n\t *     }\n\t * });\n\t * @example\n\t * // promises\n\t * client.reply(message, \"Hi there!\")\n\t *    .then(msg => console.log(\"Message sent!\"))\n\t *    .catch(err => console.log(\"Couldn't send message\"));\n\t */\n\treply(message, content, options = {}, callback = (/*err, msg*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\tvar msg = this.internal.resolver.resolveMessage(message);\n\t\tif (msg) {\n\t\t\tif (!(msg.channel instanceof PMChannel)) {\n\t\t\t\tcontent = msg.author + \", \" + content;\n\t\t\t}\n\t\t\treturn this.internal.sendMessage(msg, content, options)\n\t\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t\t}\n\t\tvar err = new Error(\"Destination not resolvable to a message!\");\n\t\tcallback(err);\n\t\treturn Promise.reject(err);\n\t}\n\n\t/**\n\t * Replies to the author of a message in the same channel the message was sent using TTS.\n\t * @param {MessageResolvable} message the message to reply to\n\t * @param {StringResolvable} content message you want to send\n\t * @param {function(err: Error, msg: Message)} [callback] to the method\n\t * @returns {Promise<Message, Error>} Resolves with a Message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // reply to messages\n\t * client.replyTTS(message, \"Hello there, this is a TTS reply!\");\n\t * @example\n\t * // callbacks\n\t * client.replyTTS(message, \"Hi there!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send message\");\n\t *     }else{\n\t *         console.log(\"Message sent!\");\n\t *     }\n\t * });\n\t * @example\n\t * // promises\n\t * client.replyTTS(message, \"Hi there!\")\n\t *    .then(msg => console.log(\"Message sent!\"))\n\t *    .catch(err => console.log(\"Couldn't send message\"));\n\t */\n\treplyTTS(message, content, callback = (/*err, msg*/) => { }) {\n\t\treturn this.reply(message, content, { tts: true })\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Deletes a message (if the client has permission to)\n\t * @param {MessageResolvable} message the message to delete\n\t * @param {MessageDeletionOptions} [options] options to apply when deleting the message\n\t * @param {function(err: Error)} [callback] callback to the method\n\t * @returns {Promise<null, Error>} Resolves with null if the deletion was successful, otherwise rejects with an Error.\n\t * @example\n\t * // deleting messages\n\t * client.deleteMessage(message);\n\t * client.deleteMessage(message, {wait:5000}); //deletes after 5 seconds\n\t * @example\n\t * // deleting messages - callback\n\t * client.deleteMessage(message, function(err){\n\t *     if(err){\n\t *         console.log(\"couldn't delete\");\n\t *     }\n\t * });\n\t * @example\n\t * // deleting messages - promise\n\t * client.deleteMessage(message)\n\t *     .then(() => console.log(\"deleted!\"))\n\t *     .catch(err => console.log(\"couldn't delete\"));\n\t */\n\tdeleteMessage(message, options = {}, callback = (/*err, {}*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\treturn this.internal.deleteMessage(message, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Bulk deletes messages (if the client has permission to)\n\t * @param {Array<MessageResolvable>} message the message to delete\n\t * @param {function(err: Error)} [callback] callback to the method\n\t * @returns {Promise<null, Error>} Resolves with null if the deletion was successful, otherwise rejects with an Error.\n\t * @example\n\t * // deleting messages\n\t * client.deleteMessages([message1, message2]);\n\t */\n\tdeleteMessages(messages, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteMessages(messages)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Edits a previously sent message (if the client has permission to)\n\t * @param {MessageResolvable} message the message to edit\n\t * @param {StringResolvable} content the new content of the message\n\t * @param {MessageOptions} [options] options to apply to the message\n\t * @param {function(err: Error, msg: Message)} [callback] callback to the method\n\t * @returns {Promise<Message, Error>} Resolves with the newly edited message if successful, otherwise rejects with an Error.\n\t * @example\n\t * // editing messages\n\t * client.updateMessage(message, \"This is an edit!\");\n\t * @example\n\t * // editing messages - callback\n\t * client.updateMessage(message, \"This is an edit!\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"couldn't edit\");\n\t *     }\n\t * });\n\t * @example\n\t * // editing messages - promise\n\t * client.updateMessage(message, \"This is an edit!\")\n\t *     .then(msg => console.log(\"edited!\"))\n\t *     .catch(err => console.log(\"couldn't edit\"));\n\t */\n\tupdateMessage(message, content, options = {}, callback = (/*err, msg*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\treturn this.internal.updateMessage(message, content, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Gets the logs of a channel with a specified limit, starting from the most recent message.\n\t * @param {TextChannelResolvable} where the channel to get the logs of\n\t * @param {Number} [limit=50] Integer, the maximum amount of messages to retrieve\n\t * @param {ChannelLogsOptions} [options] options to use when getting the logs\n\t * @param {function(err: Error, logs: Array<Message>)} [callback] callback to the method\n\t * @returns {Promise<Array<Message>, Error>} Resolves with an array of messages if successful, otherwise rejects with an error.\n\t * @example\n\t * // log content of last 500 messages in channel - callback\n\t * client.getChannelLogs(channel, 500, function(err, logs){\n\t *     if(!err){\n\t *         for(var message of logs){\n\t *             console.log(message.content);\n\t *         }\n\t *     }\n\t * });\n\t * @example\n\t * // log content of last 500 messages in channel - promise\n\t * client.getChannelLogs(channel, 500)\n\t *     .then(logs => {\n\t *         for(var message of logs){\n\t *             console.log(message.content);\n\t *         }\n\t *     })\n\t *     .catch(err => console.log(\"couldn't fetch logs\"));\n\t */\n\tgetChannelLogs(where, limit = 50, options = {}, callback = (/*err, logs*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\t\telse if (typeof limit === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = limit;\n\t\t\tlimit = 50;\n\t\t}\n\n\t\treturn this.internal.getChannelLogs(where, limit, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Gets a single message of a server\n\t * @param {ChannelResolvable} channel to get the message from\n\t * @param {function(err: Error, msg: Message} [callback] callback to the method\n\t * @returns {Promise<Message, Error>} Resolves with a message if the request was successful, otherwise rejects with an error.\n\t * @example\n\t * // get message object off a snowflake and log its content - callback\n\t * client.getMessage(channel, '192696158886428672', function(err, msg) {\n\t *     if(!err) {\n\t *         console.log(msg.content);\n\t *     } else {\n\t *         console.log(\"couldn't get the message\");\n\t *     }\n\t * }\n\t * @example\n\t * //get message object off a snowflake and log its content - promise\n\t * client.getMessage(channel, '192696158886428672')\n\t *     .then(msg => {\n\t *         console.log(msg.content);\n\t *     })\n\t *     .catch(err => console.log(\"couldn't get the message\"));\n\t */\n\n\tgetMessage(channel, messageID, callback = (/*err, msg*/) => { }) {\n\t\treturn this.internal.getMessage(channel, messageID)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Pins a message to a channel.\n\t * @param {MessageResolvable} message to pin.\n\t * @returns {Promise<null, Error>} resolves null if successful, otherwise rejects with an error.\n\t * @example\n\t * // pin message - callback\n\t * client.pinMessage(msg, (err) => {\n\t *     if(!err) {\n\t *         console.log(\"Successfully pinned message\")\n\t *     } else {\n\t *         console.log(\"Couldn't pin the message: \" + err);\n\t *     }\n\t * });\n\t * @example\n\t * // pin message - promise\n\t * client.pinMessage(msg)\n\t *     .then(() => {\n\t *         console.log(\"Successfully pinned message\");\n\t *     })\n\t *     .catch(err => console.log(\"Couldn't pin the message: \" + err));\n\t */\n\n\tpinMessage(msg, callback = (/*err*/) => { }) {\n\t\treturn this.internal.pinMessage(msg)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Unpins a message to a server.\n\t * @param {MessageResolvable} message to unpin.\n\t * @returns {Promise<null, Error>} resolves null if successful, otherwise rejects with an error.\n\t * @example\n\t * // unpin message - callback\n\t * client.unpinMessage(msg, (err) => {\n\t *     if(!err) {\n\t *         console.log(\"Successfully unpinned message\")\n\t *     } else {\n\t *         console.log(\"Couldn't pin the message: \" + err);\n\t *     }\n\t * });\n\t * @example\n\t * // unpin message - promise\n\t * client.unpinMessage(msg)\n\t *     .then(() => {\n\t *         console.log(\"Successfully unpinned message\");\n\t *     })\n\t *     .catch(err => console.log(\"Couldn't unpin the message: \" + err));\n\t */\n\n\tunpinMessage(msg, callback = (/*err*/) => { }) {\n\t\treturn this.internal.unpinMessage(msg)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Gets all pinned messages of a channel.\n\t * @param {TextChannelResolvable} where to get the pins from.\n\t * @returns {Promise<Array<Message>, Error>} Resolves with an array of messages if successful, otherwise rejects with an error.\n\t * @example\n\t * // log all pinned messages - callback\n\t * client.getPinnedMessages(channel, (err, messages) => {\n\t *     if(!err) {\n\t *         for(var message of messages) {\n\t *             console.log(message.content);\n\t *         }\n\t *     } else {\n\t *         console.log(\"Couldn't fetch pins: \" + err);\n\t *     }\n\t * });\n\t * @example\n\t * // log all pinned messages - promise\n\t * client.getPinnedMessages(channel)\n\t *     .then(messages => {\n\t *         for(var message of messages) {\n\t *             console.log(message.content);\n\t *         }\n\t *     })\n\t *     .catch(err => console.log(\"Couldn't fetch pins: \" + err));\n\t */\n\n\tgetPinnedMessages(channel, callback = (/*err, messages*/) => { }) {\n\t\treturn this.internal.getPinnedMessages(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Gets the banned users of a server (if the client has permission to)\n\t * @param {ServerResolvable} server server to get banned users of\n\t * @param {function(err: Error, bans: Array<User>)} [callback] callback to the method\n\t * @returns {Promise<Array<User>, Error>} Resolves with an array of users if the request was successful, otherwise rejects with an error.\n\t * @example\n\t * // loop through banned users - callback\n\t * client.getBans(server, function(err, bans){\n\t *     if(!err){\n\t *         for(var user of bans){\n\t *             console.log(user.username + \" was banned from \" + server.name);\n\t *         }\n\t *     }\n\t * });\n\t * @example\n\t * // loop through banned users - promise\n\t * client.getBans(server)\n\t *     .then(bans => {\n\t *         for(var user of bans){\n\t *             console.log(user.username + \" was banned from \" + server.name);\n\t *         }\n\t *     })\n\t *     .catch(err => console.log(\"couldn't get bans\"));\n\t */\n\tgetBans(server, callback = (/*err, bans*/) => { }) {\n\t\treturn this.internal.getBans(server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Sends a file (embedded if possible) to the specified channel.\n\t * @param {TextChannelResolvable} destination channel to send the file to\n\t * @param {FileResolvable} attachment the file to send\n\t * @param {string} name name of the file, especially including the extension\n\t * @param {function(err: Error, msg: Message)} [callback] callback to the method\n\t * @returns {Promise<msg: Message, err: Error>} resolves with the sent file as a message if successful, otherwise rejects with an error\n\t * @example\n\t * // send a file - callback\n\t * client.sendFile(channel, new Buffer(\"Hello this a text file\"), \"file.txt\", function(err, msg){\n\t *     if(err){\n\t *         console.log(\"Couldn't send file!\");\n\t *     }\n\t * });\n\t * @example\n\t * // send a file - promises\n\t * client.sendFile(channel, \"C:/path/to/file.txt\", \"file.txt\")\n\t *     .then(msg => console.log(\"sent file!\"))\n\t *     .catch(err => console.log(\"couldn't send file!\"));\n\t */\n\tsendFile(destination, attachment, name, content, callback = (/*err, m*/) => { }) {\n\t\tif (typeof content === \"function\") {\n\t\t\t// content is the callback\n\t\t\tcallback = content;\n\t\t\tcontent = undefined; // Will get resolved into original filename in internal\n\t\t}\n\t\tif (typeof name === \"function\") {\n\t\t\t// name is the callback\n\t\t\tcallback = name;\n\t\t\tname = undefined; // Will get resolved into original filename in internal\n\t\t}\n\n\t\treturn this.internal.sendFile(destination, attachment, name, content)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Client accepts the specified invite to join a server. If the Client is already in the server, the promise/callback resolve immediately.\n\t * @param {InviteIDResolvable} invite invite to the server\n\t * @param {function(err: Error, server: Server)} [callback] callback to the method.\n\t * @returns {Promise<Server, Error>} resolves with the newly joined server if succesful, rejects with an error if not.\n\t * @example\n\t * // join a server - callback\n\t * client.joinServer(\"https://discord.gg/0BwZcrFhUKZ55bJL\", function(err, server){\n\t *     if(!err){\n\t *         console.log(\"Joined \" + server.name);\n\t *     }\n\t * });\n\t * @example\n\t * // join a server - promises\n\t * client.joinServer(\"https://discord.gg/0BwZcrFhUKZ55bJL\")\n\t *     .then(server => console.log(\"Joined \" + server.name))\n\t *     .catch(err => console.log(\"Couldn't join!\"));\n\t */\n\tjoinServer(invite, callback = (/*err, srv*/) => { }) {\n\t\treturn this.internal.joinServer(invite)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Creates a Discord Server and joins it\n\t * @param {string} name the name of the server\n\t * @param {region} [region=london] the region of the server\n\t * @param {function(err: Error, server: Server)} [callback] callback to the method\n\t * @returns {Promise<Server, Error>} resolves with the newly created server if successful, rejects with an error if not.\n\t * @example\n\t * //creating a server - callback\n\t * client.createServer(\"discord.js\", \"london\", function(err, server){\n\t *     if(err){\n\t *         console.log(\"could not create server\");\n\t *     }\n\t * });\n\t * @example\n\t * //creating a server - promises\n\t * client.createServer(\"discord.js\", \"london\")\n\t *      .then(server => console.log(\"Made server!\"))\n\t *      .catch(error => console.log(\"Couldn't make server!\"));\n\t */\n\tcreateServer(name, region = \"london\", callback = (/*err, srv*/) => { }) {\n\t\treturn this.internal.createServer(name, region)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Leaves a Discord Server\n\t * @param {ServerResolvable} server the server to leave\n\t * @param {function(err: Error)} [callback] callback to the method\n\t * @returns {Promise<null, Error>} resolves null if successful, otherwise rejects with an error.\n\t */\n\tleaveServer(server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.leaveServer(server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def updateServer\n\tupdateServer(server, options, region, callback = (/*err, srv*/) => { }) {\n\t\tif (typeof region === \"function\") {\n\t\t\t// region is the callback\n\t\t\tcallback = region;\n\t\t\tregion = undefined;\n\t\t} else if (region && typeof options === \"string\") {\n\t\t\toptions = {\n\t\t\t\tname: options,\n\t\t\t\tregion: region\n\t\t\t};\n\t\t}\n\n\t\treturn this.internal.updateServer(server, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t/**\n\t * Deletes a Discord Server\n\t * @param {ServerResolvable} server the server to leave\n\t * @param {function(err: Error)} [callback] callback to the method\n\t * @returns {Promise<null, Error>} resolves null if successful, otherwise rejects with an error.\n\t */\n\tdeleteServer(server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteServer(server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def createChannel\n\tcreateChannel(server, name, type = 0, callback = (/*err, channel*/) => { }) {\n\t\tif (typeof type === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = type;\n\t\t\ttype = 0;\n\t\t}\n\n\t\treturn this.internal.createChannel(server, name, type)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def deleteChannel\n\tdeleteChannel(channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteChannel(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def banMember\n\tbanMember(user, server, length = 1, callback = (/*err, {}*/) => { }) {\n\t\tif (typeof length === \"function\") {\n\t\t\t// length is the callback\n\t\t\tcallback = length;\n\t\t\tlength = 1;\n\t\t}\n\n\t\treturn this.internal.banMember(user, server, length)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def unbanMember\n\tunbanMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.unbanMember(user, server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def kickMember\n\tkickMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.kickMember(user, server)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def moveMember\n\tmoveMember(user, channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.moveMember(user, channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def muteMember\n\tmuteMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.muteMember(user, server)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def unmuteMember\n\tunmuteMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.unmuteMember(user, server)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def deafenMember\n\tdeafenMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deafenMember(user, server)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def undeafenMember\n\tundeafenMember(user, server, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.undeafenMember(user, server)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setNickname\n\tsetNickname(server, nick, user, callback = (/*err, {}*/) => { }) {\n\t\tif (typeof user === \"function\") {\n\t\t\t// user is the callback\n\t\t\tcallback = user;\n\t\t\tuser = null;\n\t\t}\n\t\tif(!user) {\n\t\t\tuser = this.user;\n\t\t}\n\t\treturn this.internal.setNickname(server, nick, user)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setNote\n\tsetNote(user, note, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setNote(user,note)\n\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def createRole\n\tcreateRole(server, data = null, callback = (/*err, role*/) => { }) {\n\t\tif (typeof data === \"function\") {\n\t\t\t// data is the callback\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\n\t\treturn this.internal.createRole(server, data)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def updateRole\n\tupdateRole(role, data = null, callback = (/*err, role*/) => { }) {\n\t\tif (typeof data === \"function\") {\n\t\t\t// data is the callback\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\t\treturn this.internal.updateRole(role, data)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def deleteRole\n\tdeleteRole(role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteRole(role)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def addMemberToRole\n\taddMemberToRole(member, role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.addMemberToRole(member, role)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def addUserToRole\n\taddUserToRole(member, role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.addMemberToRole(member, role, callback);\n\t}\n\n\t// def addUserToRole\n\tmemberHasRole(member, role) {\n\t\treturn this.internal.memberHasRole(member, role);\n\t}\n\n\t// def addUserToRole\n\tuserHasRole(member, role) {\n\t\treturn this.memberHasRole(member, role);\n\t}\n\n\t// def removeMemberFromRole\n\tremoveMemberFromRole(member, role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.removeMemberFromRole(member, role)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def removeUserFromRole\n\tremoveUserFromRole(member, role, callback = (/*err, {}*/) => { }) {\n\t\treturn this.removeMemberFromRole(member, role, callback);\n\t}\n\n\t// def createInvite\n\tcreateInvite(chanServ, options, callback = (/*err, invite*/) => { }) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = undefined;\n\t\t}\n\n\t\treturn this.internal.createInvite(chanServ, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def deleteInvite\n\tdeleteInvite(invite, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.deleteInvite(invite)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def getInvite\n\tgetInvite(invite, callback = (/*err, inv*/) => { }) {\n\t\treturn this.internal.getInvite(invite)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def getInvites\n\tgetInvites(channel, callback = (/*err, inv*/) => { }) {\n\t\treturn this.internal.getInvites(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def overwritePermissions\n\toverwritePermissions(channel, role, options = {}, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.overwritePermissions(channel, role, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setStatus\n\tsetStatus(idleStatus, game, callback = (/*err, {}*/) => { }) {\n\t\tif (typeof game === \"function\") {\n\t\t\t// game is the callback\n\t\t\tcallback = game;\n\t\t\tgame = null;\n\t\t} else if (typeof idleStatus === \"function\") {\n\t\t\t// idleStatus is the callback\n\t\t\tcallback = idleStatus;\n\t\t\tgame = null;\n\t\t}\n\n\t\treturn this.internal.setStatus(idleStatus, game)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def sendTyping\n\tsendTyping(channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.sendTyping(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelTopic\n\tsetChannelTopic(channel, topic, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelTopic(channel, topic)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelName\n\tsetChannelName(channel, name, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelName(channel, name)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelPosition\n\tsetChannelPosition(channel, position, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelPosition(channel, position)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelUserLimit\n\tsetChannelUserLimit(channel, limit, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelUserLimit(channel, limit)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setChannelBitrate\n\tsetChannelBitrate(channel, kbitrate, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setChannelBitrate(channel, kbitrate)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def updateChannel\n\tupdateChannel(channel, data, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.updateChannel(channel, data)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def startTyping\n\tstartTyping(channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.startTyping(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def stopTyping\n\tstopTyping(channel, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.stopTyping(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def updateDetails\n\tupdateDetails(details, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.updateDetails(details)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setUsername\n\tsetUsername(name, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setUsername(name)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def setAvatar\n\tsetAvatar(avatar, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setAvatar(avatar)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def joinVoiceChannel\n\tjoinVoiceChannel(channel, callback = (/*err, channel*/) => { }) {\n\t\treturn this.internal.joinVoiceChannel(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def leaveVoiceChannel\n\tleaveVoiceChannel(chann, callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.leaveVoiceChannel(chann)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def addFriend\n\taddFriend(user, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.addFriend(user)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def removeFriend\n\tremoveFriend(user, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.removeFriend(user)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tgetServerWebhooks(guild, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.getServerWebhooks(guild)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tgetChannelWebhooks(channel, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.getChannelWebhooks(channel)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tsendWebhookMessage(webhook, content, options = {}, callback = (/*err, {}*/) => {}) {\n\t\tif (typeof options === \"function\") {\n\t\t\t// options is the callback\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\treturn this.internal.sendWebhookMessage(webhook, content, options)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\teditWebhook(webhook, options = {}, callback = (/*err, {}*/) => {}) {\n    if (typeof options === \"function\") {\n      // options is the callback\n      callback = options;\n      options = {};\n    }\n\n\t  return this.internal.editWebhook(webhook, options)\n      .then(dataCallback(callback), errorCallback(callback));\n  }\n\n  createWebhook(webhook, options = {}, callback = (/*err, {}*/) => {}) {\n    if (typeof options === \"function\") {\n      // options is the callback\n      callback = options;\n      options = {};\n    }\n\n    return this.internal.createWebhook(webhook, options)\n      .then(dataCallback(callback), errorCallback(callback));\n  }\n\n\tdeleteWebhook(webhook, callback = (/*err, {}*/) => {}) {\n\t\treturn this.internal.createWebhook(webhook)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def getOAuthApplication\n\tgetOAuthApplication(appID, callback = (/*err, bans*/) => { }) {\n\t\tif (typeof appID === \"function\") {\n\t\t\t// appID is the callback\n\t\t\tcallback = appID;\n\t\t\tappID = null;\n\t\t}\n\t\treturn this.internal.getOAuthApplication(appID)\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\t// def awaitResponse\n\tawaitResponse(msg, toSend = null, options = null, callback = (/*err, newMsg*/) => { }) {\n\t\tvar ret;\n\n\t\tif (toSend) {\n\t\t\tif (typeof toSend === \"function\") {\n\t\t\t\t// (msg, callback)\n\t\t\t\tcallback = toSend;\n\t\t\t\ttoSend = null;\n\t\t\t\toptions = null;\n\t\t\t} else {\n\t\t\t\t// (msg, toSend, ...)\n\t\t\t\tif (options) {\n\t\t\t\t\tif (typeof options === \"function\") {\n\t\t\t\t\t\t//(msg, toSend, callback)\n\t\t\t\t\t\tcallback = options;\n\t\t\t\t\t\toptions = null;\n\t\t\t\t\t\tret = this.sendMessage(msg, toSend);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//(msg, toSend, options, callback)\n\t\t\t\t\t\tret = this.sendMessage(msg, toSend, options);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// (msg, toSend) promise\n\t\t\t\t\tret = this.sendMessage(msg, toSend);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!ret) {\n\t\t\tret = Promise.resolve();\n\t\t}\n\t\t// (msg) promise\n\t\treturn ret.then(() => this.internal.awaitResponse(msg))\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tsetStatusIdle(callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setStatus(\"idle\")\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tsetStatusOnline(callback = (/*err, {}*/) => { }) {\n\t\treturn this.internal.setStatus(\"online\")\n\t\t\t.then(dataCallback(callback), errorCallback(callback));\n\t}\n\n\tsetStatusActive(callback) {\n\t\treturn this.setStatusOnline(callback);\n\t}\n\n\tsetStatusHere(callback) {\n\t\treturn this.setStatusOnline(callback);\n\t}\n\n\tsetStatusAvailable(callback) {\n\t\treturn this.setStatusOnline(callback);\n\t}\n\n\tsetStatusAway(callback) {\n\t\treturn this.setStatusIdle(callback);\n\t}\n\n\tsetPlayingGame(game, callback = (/*err, {}*/) => { }) {\n\t\treturn this.setStatus(null, game, callback);\n\t}\n\n\tsetStreaming(name, url, type, callback = (/*err, {}*/) => { }) {\n\t\treturn this.setStatus(null, {name: name, url: url, type: type}, callback);\n\t}\n\n\t//def forceFetchUsers\n\tforceFetchUsers(callback){\n\t\treturn this.internal.forceFetchUsers().then(callback);\n\t}\n}\n"]}